" Joe Kitchen's vimrc file
" Compatible with Vim 7.3
"
" Changelog:{{{ 
" 19/09/12:
" + Added a number of new keymappings
" + Cleaned up file layout
" + Removed superfluous [help] and [RO] flags from statusline
" 20/09/12:
" + Wrote function to turn spellcheck on and off
" 19/10/12:
" + cleaned up all imap, nmap, and vmap to [i|n|v]noremap
" + Added first abbreviations
" 21/10/12:
" + Expanded section on abbreviations
" + Simpler screen splitting
" + Added mappings surrounding words/selections with brackets/quote marks
" + Added marker at column 80
" 25/03/13
" + moved abbreviations to ~/.vim/autocorrect and sourced
" + added command for quick editing of xmonad.hs
" + added a section for quick-config commands
" 26/03/13
" + added commands for quick-editing of .bashrc and .xinitrc
" 29/03/13
" + added Pathogen
" + changed colorscheme to Solarized
" + added keymappings for move to next section in latex files
" + added keymappings to emphasise or bold a word in latex files
" 30/03/13
" + added HardMode
" 01/04/13
" + HardMode disabled by default; movement with h&l disabled
" + Added Folding Marks
" }}}
" CONTENTS:{{{
"   1.  GENERAL OPTIONS
"   2.  CODING
"     i   Bracket Options
"     ii  Tab Options
"     iii Indentation Options
"     iv  Filetype Options
"   3.  SEARCHING
"   4.  TABS
"   5.  MOVEMENT
"   6.  MODE CHANGING
"   7.  COPY & PASTE
"   8.  CONFIGURATION
"   9.  MISC KEYMAPS
"   10.  FUNCTIONS
"   11. STATUSLINE
"   12. ABBREVIATIONS
"   13. PLUG-INS
"   14: BOILERPLATE
" }}}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" GENERAL OPTIONS{{{ 

" runtime! debian.vim    " DO NOT REMOVE. ENABLES DEBIAN SYSTEM OPTIONS.
set nocompatible       " turn off vi compatibility mode

execute pathogen#infect()
execute pathogen#helptags()
" autocmd VimEnter,BufNewFile,BufReadPost * silent! call HardMode()
let mapleader = ","
let maplocalleader = "\\"
                       " leader is , rather than \
                       " local leader is \
set mouse=a            " mouse is always available
set encoding=utf-8     " for Powerline
set hidden             " hide abandoned buffers
set wildmenu           " allow tab-completion and stuff
set showcmd            " show partial command
set number             " line numbers on
set cursorline         " highlight cursor line
set cursorcolumn       " highlight cursor column
set shortmess+=I       " disable welcome message
set laststatus=2       " always show status-line
set noswapfile         " disable backups
set nobackup           " disable backups
set nowritebackup      " disable backups
set spell              " spell-check on
set spelllang=en       " set English as spell-check's language
set formatoptions=l    " enable soft word-wrap
set linebreak          " wrap at end of word, rather than in middle
set whichwrap=h,l      " h and l commands can wrap over lines
set foldmethod=marker  " {{{ and }}} mark folds
set guioptions-=T      " if using gvim, do not show toolbar
set guioptions-=m      " if using gvim, do not show menus
set guioptions-=r      " do not show right-scrollbar
set guioptions-=l      " ditto left scrollbar
au FocusLost * :wa
                       " save everything when tabbing to another window
" }}}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" CODING{{{ 

syntax enable          " syntax hilighting
if has('gui_running')
  set background=light
else
  set background=dark
endif
colorscheme solarized
" Bracket Options
set showmatch          " show matching brackets
nnoremap <tab> %
vnoremap <tab> %
                       " tabkey matches bracket pairs
" Tab Options
set tabstop=2          " a tab is two spaces
set shiftwidth=2       " autoindent (>> and <<) indent by two spaces
set expandtab          " expand tabs to spaces
" Indentation Options
set autoindent         " copy indentation level for newline
set copyindent         " copy indentation types (spaces or tabs)
" Filetype Recognition Options
filetype on            " try to recognise filetypes
filetype indent on     " set indentation options appropriate to filetypes
filetype plugin on
filetype plugin indent on
" Misc Options
set colorcolumn=80     " Highlight 80th column

" }}}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" SEARCHING{{{

set ignorecase         " case insensitive matching
set smartcase          " smart case matching
set incsearch          " Search incrementally
set hlsearch           " Hilight search hits
nnoremap <silent> <leader><space> :nohlsearch<CR>
                       " ,<space> clears search highlights
vnoremap <silent> * :call VisualSelection('f')<CR>
                       " In visual mode, search forward for selection
vnoremap <silent> # :call VisualSelection('b')<CR>
                       " In visual mode, search backward for selection

" }}}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" TABS & SPLITSCREENS{{{
" more convenient tabbing
map <leader>t :tabnew<cr>
                       " ,t opens a new tab
map  <C-Tab> :tabnext <CR>
nnoremap <right> :tabnext <CR>
inoremap <C-Tab> <ESC> :tabnext <CR>
inoremap <right> <ESC>:tabnext<CR>
                       " <C-Tab> and <right> cycle to next tab
map  <C-S-Tab> :tabprevious <CR>
nnoremap <left> :tabprevious <CR>
inoremap <C-S-Tab> <ESC> :tabprevious <CR>
inoremap <left> <ESC>:tabprevious<CR>
                       " <C-Tab> and <left> cycle to previous tab
map <leader> 1 :tabn 1<cr>
map <leader> 2 :tabn 2<cr>
map <leader> 3 :tabn 3<cr>
map <leader> 4 :tabn 4<cr>
map <leader> 5 :tabn 5<cr>
map <leader> 6 :tabn 6<cr>
map <leader> 7 :tabn 7<cr>
map <leader> 8 :tabn 8<cr>
map <leader> 9 :tabn 9<cr>
                       " ,<num> switches to tab #<num>

" make splitscreen easier to use
" ,v splits screen vertically; ,h horizontally
nnoremap <leader>v <C-w>v<C-w>l
nnoremap <leader>h <C-w>s<C-w>j
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <C-left> <C-w>h
nnoremap <C-down> <C-w>j
nnoremap <C-up> <C-w>k
nnoremap <C-right> <C-w>l

" }}}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" MOVEMENT{{{
nnoremap <up> <nop>
nnoremap <down> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
nnoremap h <nop>
nnoremap l <nop>
" j and k move by screenlines rather than absolute lines
"nnoremap j gj
"nnoremap k gk
"vnoremap j gj
"vnoremap k gk
" H & L move to beginning and end of lines
nnoremap H 0
nnoremap L $
" G also centres new line
nnoremap G Gzz

" }}}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" MODE CHANGING{{{
" jj escapes into normal mode 
inoremap jj <ESC>
inoremap jk <ESC>
" ; enters cmd mode
nnoremap ; :
" toggle paste mode (to paste properly indented text)
noremap <F6> :set invpaste paste?<CR>
set pastetoggle=<F6>
set showmode

" }}}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" COPY & PASTE{{{
" ,y ,Y and ,p are y Y and p using the system clipboard as the buffer
" I barely ever use this: highlight and <S-INS> is much more common...
noremap <leader>y "+y
noremap <leader>Y "+Y
noremap <leader>p "+gP
" remap Y to behave consistently with C and D
nnoremap Y y$

" }}}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" CONFIGURATION{{{
" Quickly edit/reload the vimrc file
nnoremap <silent> <leader>ev :vsplit $MYVIMRC<CR>
nnoremap <silent> <leader>sv :source $MYVIMRC<CR>
nnoremap <silent> <leader>ea :vsplit ~/.vim/autocorrect<CR>
nnoremap <silent> <leader>eb :vsplit ~/.bashrc<CR>
nnoremap <silent> <leader>ef :vsplit ~/.fvwm/config<CR>
nnoremap <silent> <leader>ei :vsplit ~/.xinitrc<CR>
nnoremap <silent> <leader>eo :vsplit ~/.config/openbox/rc.xml<CR>
nnoremap <silent> <leader>ex :vsplit ~/.xmonad/xmonad.hs

" }}}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" MISC KEYMAPS{{{
 
" use :w!! to write to a file using sudo
cmap w!! %!sudo tee > /dev/null %
" ,j inserts line-break at cursor
nnoremap <silent> <leader>j i<CR><ESC>
" ,o and ,O insert newlines without entering insert mode
nnoremap <silent> <leader>o o<ESC>
nnoremap <silent> <leader>O O<ESC>
" Ctrl+Backspace deletes last word
inoremap <C-BS> <C-W>
" Ctrl+Del deletes next word
inoremap <C-Del> <esc>cw
" Quickly surround word with ", ', (, [, {, <, or `
nnoremap <leader>" viw<esc>a"<esc>hbi"<esc>lel
nnoremap <leader>' viw<esc>a'<esc>hbi'<esc>lel
nnoremap <leader>( viw<esc>a(<esc>hbi)<esc>lel
nnoremap <leader>[ viw<esc>a[<esc>hbi]<esc>lel
nnoremap <leader>{ viw<esc>a{<esc>hbi}<esc>lel
nnoremap <leader>< viw<esc>a<<esc>hbi><esc>lel
nnoremap <leader>` viw<esc>a`<esc>hbi`<esc>lel
" Quickly surround selection with ", ', (, [, {, <, or `
vnoremap <leader>" <esc>`<i"<esc>`>a"<esc>
vnoremap <leader>' <esc>`<i'<esc>`>a'<esc>
vnoremap <leader>( <esc>`<i(<esc>`>a)<esc>
vnoremap <leader>[ <esc>`<i[<esc>`>a]<esc>
vnoremap <leader>{ <esc>`<i{<esc>`>a}<esc>
vnoremap <leader>< <esc>`<i<<esc>`>a><esc>
vnoremap <leader>` <esc>`<i`<esc>`>a`<esc>

" Bullet point a list: preface line with a *
nnoremap <leader>* I*<space><esc>
" Number all lines
nnoremap <leader># :%s/^/\=line('.').". "/ 

nnoremap <leader>, ,
nnoremap <leader>; ;

nnoremap <F8> :!ctags -R<CR>

" TEMP
" F1-4 and F8-12 are kept free for temporary remapping, as are <S-F[4-12]>

" Filetype Specific
autocmd FileType tex nnoremap <buffer> <localleader>i bi\textit{<ESC>ea}<ESC>
autocmd FileType tex nnoremap <buffer> <localleader>b bi\textbf{<ESC>ea}<ESC>
autocmd FileType tex nnoremap <buffer> <f2> A\\ <ESC>
autocmd FileType tex nnoremap <silent> ]n :/\\\(sub\)\{,2}section\s*{<CR> :noh<CR>
autocmd FileType tex nnoremap <silent> [n :?\\\(sub\)\{,2}section\s*{<CR> :noh<CR>
" }}}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" FUNCTIONS{{{

" F5 toggles between abs. and rel. line #s [vim 7.3 onwards]
function! g:ToggleNuMode()
	if(&rnu == 1)
		set number
	else
		set relativenumber
	endif
endfunc
nnoremap <F5> :call g:ToggleNuMode()<CR>

" F7 toggles spellcheck on and off
function! g:ToggleSpCheck()
  if(&spell == 1)
    set nospell
  else
    set spell
  endif
endfunc
map <F7> :call g:ToggleSpCheck()<CR>

" Find a file and pass it to cmd
" uses two functions: chomp and dmenuopen
function! Chomp(str)
  return substitute(a:str, '\n$', '', '')
endfunction

function! DmenuOpen(cmd)
  let fname = Chomp(system("find ~/ -type f | dmenu -nb '#2e3436' -i -l 20 -p " . a:cmd))
  if empty(fname)
    return
  endif
  execute a:cmd . " " . fname
endfunction
map <c-t> :call DmenuOpen("tabe")<cr>
map <c-f> :call DmenuOpen("e")<cr>

" }}}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" STATUSLINE{{{

" name, modified flag, filetype, lines, columns, total lines
set statusline=%F%m\ %y\ %=[%l,%c%V][%p%%]\ [%L] 

" }}}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" ABBREVIATIONS{{{
source ~/.vim/autocorrect

" }}}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" PLUG-INS{{{

let g:vimwiki_list = [{'path': '~/vimwiki/'}, {'path': '~/documents/schoolwork/university_work/notes/'}]
nnoremap <F9> :call ToggleHardMode()<CR>
let g:syntastic_enable_hilighting=1
nnoremap <F10> :SyntasticCheck<CR>
let g:tex_pdf_map_keys=0
autocmd FileType tex nnoremap <silent> <localleader>r :BuildAndViewTexPdf<CR>

" }}}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" BOILERPLATE{{{
" Latex
noremap <S-F1> i\documentclass[a4paper, 12pt]{article}<CR><CR>\title{}<CR>\author{Joe Kitchen}<CR><CR>\begin{document}<CR><CR>\end{document}<ESC>
noremap <S-F2> i#!/bin/sh<CR><ESC>
noremap <S-F3> i#!/usr/bin/env python<CR><ESC>
" }}}
