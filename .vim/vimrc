" Joe Kitchen's vimrc file
" Compatible with Vim 7.03
" Last Edited: 20/09/2012
"
" Changelog:
" 19/09/12:
" + Added a number of new keymaps
" + Cleaned up file layout
" + Removed superfluous [help] and [RO] flags from statusline
" 20/09/12:
" + Wrote function to turn spellcheck on and off
" 19/10/12:
" + cleaned up all imap, nmap, and vmap to [i|n|v]noremap
" + Added first abbreviations
"
" CONTENTS:
"   1. GENERAL OPTIONS
"   2. CODING
"     2.i   Bracket Options
"     2.ii  Tab Options
"     2.iii Indentation Options
"     2.iv  Filetype Options
"   3. SEARCHING
"   4. TABS
"   5. MOVEMENT
"   6. MODE CHANGING
"   7. COPY & PASTE
"   8. MISC KEYMAPS
"   9. FUNCTIONS
"   10. STATUSLINE
"   11. ABBREVIATIONS

" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" GENERAL OPTIONS

runtime! debian.vim    " DO NOT REMOVE. ENABLES DEBIAN SYSTEM OPTIONS.
set nocompatible       " turn off vi compatibility mode
let mapleader = ","
let maplocalleader = "\\"
                       " leader is , rather than \
set mouse=a            " mouse is always available
set hidden             " hide abandoned buffers
set wildmenu           " allow tab-completion and stuff
set showcmd            " show partial command
set number             " line numbers on
set cursorline         " highlight cursor line
set cursorcolumn       " highlight cursor column
set shortmess+=I       " disable welcome message
set laststatus=2       " always show statusline
set noswapfile         " disable backups
set nobackup
set nowb
set spell              " spellcheck on
set spelllang=en
set formatoptions=l    " enable soft word-wrap
set lbr                " wrap at end of word, rather than in middle

" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" CODING

syntax on              " syntax hilighting
" Bracket Options
set showmatch          " show matching brackets
nnoremap <tab> %
vnoremap <tab> %
                       " tabkey matches bracket pairs
" Tab Options
set tabstop=2          " a tab is two spaces
set shiftwidth=2       " autoindent (>> and <<) indent by two spaces
set expandtab          " expand tabs to spaces
" Indentation Options
set autoindent         " copy indentation level for newline
set copyindent         " copy indentation types (spaces or tabs)
" Filetype Recognition Options
filetype on            " try to recognise filetypes
filetype indent on     " set indentation options appropriate to filetypes
filetype plugin on
filetype plugin indent on

" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" SEARCHING

set ignorecase         " case insensitive matching
set smartcase          " smart case matching
set incsearch          " Search incrementally
set hlsearch           " Hilight search hits
nnoremap <silent> <leader><space> :nohlsearch<CR>
                       " ,<space> clears search highlights
vnoremap <silent> * :call VisualSelection('f')<CR>
                       " In visual mode, search forward for selection
vnoremap <silent> # :call VisualSelection('b')<CR>
                       " In visual mode, search backward for selection

" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" TABS
" more convenient tabbing
map <leader>t :tabnew<cr>
                       " ,t opens a new tab
map  <C-Tab> :tabnext <CR>
nnoremap <right> :tabnext <CR>
inoremap <C-Tab> <ESC> :tabnext <CR>
inoremap <right> <ESC>:tabnext<CR>
                       " <C-Tab> and <right> cycle to next tab
map  <C-S-Tab> :tabprevious <CR>
nnoremap <left> :tabprevious <CR>
inoremap <C-S-Tab> <ESC> :tabprevious <CR>
inoremap <left> <ESC>:tabprevious<CR>
                       " <C-Tab> and <left> cycle to previous tab
map <leader> 1 :tabn 1<cr>
map <leader> 2 :tabn 2<cr>
map <leader> 3 :tabn 3<cr>
map <leader> 4 :tabn 4<cr>
map <leader> 5 :tabn 5<cr>
map <leader> 6 :tabn 6<cr>
map <leader> 7 :tabn 7<cr>
map <leader> 8 :tabn 8<cr>
map <leader> 9 :tabn 9<cr>
                       " ,<num> switches to tab #<num>

" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" MOVEMENT
nnoremap <up> <nop>
nnoremap <down> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
" j and k move by screenlines rather than absolute lines
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk
nnoremap H 0
nnoremap L $

" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" MODE CHANGING
" jj and <F1> escape into normal mode 
inoremap jj <ESC>
inoremap <F1> <Esc>
" ; enters cmd mode
nnoremap ; :

" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" COPY & PASTE
" ,y ,Y and ,p are y Y and p using the system clipboard as the buffer
noremap <leader>y "+y
noremap <leader>Y "+Y
noremap <leader>p "+gP

" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" MISC KEYMAPS:
 
" toggle paste mode (to paste properly indented text)
nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>
set showmode
" use :w!! to write to a file using sudo
cmap w!! %!sudo tee > /dev/null %
" ,j inserts line-break at cursor
nnoremap <silent> <leader>j i<CR><ESC>
" ,o and ,O insert newlines without entering insert mode
nnoremap <silent> <leader>o o<ESC>
nnoremap <silent> <leader>O O<ESC>
" make splitscreen easier to use
nnoremap <leader>w <C-w>v<C-w>l
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
" Quickly edit/reload the vimrc file
nnoremap <silent> <leader>ev :vsplit $MYVIMRC<CR>
nnoremap <silent> <leader>sv :source $MYVIMRC<CR>
" Quickly surround word with ", ', (, [, {, <, or `
nnoremap <leader>" viw<esc>a"<esc>hbi"<esc>lel
nnoremap <leader>' viw<esc>a'<esc>hbi'<esc>lel
nnoremap <leader>( viw<esc>a(<esc>hbi)<esc>lel
nnoremap <leader>[ viw<esc>a[<esc>hbi]<esc>lel
nnoremap <leader>{ viw<esc>a{<esc>hbi}<esc>lel
nnoremap <leader>< viw<esc>a<<esc>hbi><esc>lel
nnoremap <leader>` viw<esc>a`<esc>hbi`<esc>lel
" Quickly surround selection with ", ', (, [, {, <, or `
vnoremap <leader>" <esc>`<i"<esc>`>la"<esc>
vnoremap <leader>' <esc>`<i'<esc>`>la'<esc>
vnoremap <leader>( <esc>`<i(<esc>`>la)<esc>
vnoremap <leader>[ <esc>`<i[<esc>`>la]<esc>
vnoremap <leader>{ <esc>`<i{<esc>`>la}<esc>
vnoremap <leader>< <esc>`<i<<esc>`>la><esc>
vnoremap <leader>` <esc>`<i`<esc>`>la`<esc>

" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" FUNCTIONS

" F5 toggles between abs. and rel. line #s [vim 7.3 onwards]
function! g:ToggleNuMode()
	if(&rnu == 1)
		set nu
	else
		set rnu
	endif
endfunc
nnoremap <F5> :call g:ToggleNuMode()<CR>

" F7 toggles spellcheck on and off
function! g:ToggleSpCheck()
  if(&spell == 1)
    set nospell
  else
    set spell
  endif
endfunc
map <F7> :call g:ToggleSpCheck()<CR>

" Find a file and pass it to cmd
" uses two functions: chomp and dmenuopen
function! Chomp(str)
  return substitute(a:str, '\n$', '', '')
endfunction

function! DmenuOpen(cmd)
  let fname = Chomp(system("find ~/ | dmenu -i -l 20 -p " . a:cmd))
  if empty(fname)
    return
  endif
  execute a:cmd . " " . fname
endfunction
map <c-t> :call DmenuOpen("tabe")<cr>
map <c-f> :call DmenuOpen("e")<cr>

" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" STATUSLINE

"define 3 custom highlight groups
hi User1 ctermbg=green ctermfg=black   guibg=green guifg=black 
hi User2 ctermbg=red   ctermfg=darkblue  guibg=red   guifg=darkblue
hi User3 ctermbg=blue  ctermfg=green guibg=blue  guifg=green

set statusline=
set statusline+=%1*
" filepath
set statusline+=%.30F
set statusline+=%*
" filetype, [modified flag]
set statusline+=\ %y\ %m
" statusline: separation between left and right aligned items
set statusline+=%=
" statusline: line number, column number, percent
set statusline+=%3*
set statusline+=[L:\ %l/%L]\ [C:\ %v]
set statusline+=%2*
set statusline+=\ [%p%%]

" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
" ABBREVIATIONS

" Auto-correcting spellings
iabbrev alleigance allegiance
iabbrev alliegance allegiance
" Inserting correct hyphenation
iabbrev plugin plug-in
iabbrev plugins plug-ins
" Capitalising proper nouns
iabbrev vim Vim
iabbrev firefox Firefox
iabbrev iceweasel Iceweasel
iabbrev linux Linux
iabbrev unix Unix
iabbrev england England
iabbrev britain Britain
iabbrev germany Germany
iabbrev france France
" Expanding abbreviations
iabbrev WWI First World War
iabbrev WWII Second World War
iabbrev wwi First World War
iabbrev wwii Second World War

" Abbreviations for specific filetypes only
" LaTeX
autocmd FileType tex :iabbrev <buffer> < \textless
autocmd FileType tex :iabbrev <buffer> > \textgreater
" Python
autocmd FileType python :iabbrev <buffer> iff if:<left>

